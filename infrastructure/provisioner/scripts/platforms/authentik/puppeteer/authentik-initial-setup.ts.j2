import puppeteer from "puppeteer";
import { wait } from "./utils";

const baseUrl = "http://{{ vm_ip }}:9000";
const ADMIN_EMAIL = "{{ admin_email }}";
const ADMIN_PASSWORD = "{{ app_secret }}";

(async () => {
  const browser = await puppeteer.launch({
    headless: "new",
    args: ["--no-sandbox"],
    timeout: 60_000,
  });

  const page = await browser.newPage();

  // Set screen size
  await page.setViewport({ width: 1200, height: 1024 });

  // Navigate the page to a URL
  await Promise.all([
    page.goto(baseUrl + "/if/flow/initial-setup/"),
    page.waitForNavigation(),
  ]);

  await page.waitForNetworkIdle();

  /**
   * ===========================
   * Authentik Initial Setup
   */

  const inputSelectorValue = async (
    input_selector: string,
    input_value: string
  ) => {
    const inputHandle = await page.evaluate(
      (input_selector, input_value) => {
        const inputs: NodeListOf<Element> | Element[] = document
          .querySelector("ak-flow-executor")
          .shadowRoot.querySelector("ak-stage-prompt")
          .shadowRoot.querySelectorAll("ak-form-element");

        Array.from(inputs).forEach((element) => {
          const input: HTMLInputElement = element.querySelector(input_selector);

          if (input) {
            input.value = input_value;
          }
        });
      },
      input_selector,
      input_value
    );

    return inputHandle;
  };

  // EMAIL
  await inputSelectorValue("input[name=email]", ADMIN_EMAIL);

  //   PASSWORD
  await inputSelectorValue("input[name=password]", ADMIN_PASSWORD);

  //   PASSWORD REPEAT
  await inputSelectorValue("input[name=password_repeat]", ADMIN_PASSWORD);

  const submitBtn = () =>
    page.evaluate(() => {
      document
        .querySelector("ak-flow-executor")
        .shadowRoot.querySelector("ak-stage-prompt")
        .shadowRoot.querySelector<HTMLButtonElement>("button[type=submit]")
        .click();
    });

  await Promise.all([
    page.waitForNavigation(),
    page.waitForNetworkIdle(),
    submitBtn(),
  ]);

  await wait(10);

  await browser.close();
})();
