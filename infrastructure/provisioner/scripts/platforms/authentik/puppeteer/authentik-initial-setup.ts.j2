import puppeteer from "puppeteer";
import { wait } from "./utils";

const baseUrl = "http://{{ vm_ip }}:9000";
const ADMIN_EMAIL = "{{ admin_email }}";
const ADMIN_PASSWORD = "{{ app_secret }}";

(async () => {
  const browser = await puppeteer.launch({
    headless: "new",
    args: ["--no-sandbox"],
    timeout: 60_000,
  });

  const page = await browser.newPage();

  // Set screen size
  await page.setViewport({ width: 1200, height: 1024 });

  // Navigate the page to a URL
  await Promise.all([
    page.goto(baseUrl + "/if/flow/initial-setup/"),
    page.waitForNavigation(),
  ]);

  await page.waitForNetworkIdle();

  /**
   * ===========================
   * Authentik Initial Setup
   */
  const request = page.evaluate(
    (ADMIN_EMAIL, ADMIN_PASSWORD) => {
      return fetch("/api/v3/flows/executor/initial-setup/?query=", {
        method: "POST",
        body: JSON.stringify({
          email: ADMIN_EMAIL,
          password: ADMIN_PASSWORD,
          password_repeat: ADMIN_PASSWORD,
          component: "ak-stage-prompt",
        }),
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "same-origin",
      });
    },
    ADMIN_EMAIL,
    ADMIN_PASSWORD
  );

  await Promise.all([request, page.waitForNetworkIdle()]);

  await wait(10);

  await browser.close();
})();
