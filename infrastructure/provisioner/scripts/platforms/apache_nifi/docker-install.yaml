# Install Docker
- include_tasks: ../../tasks/docker.yaml

# Generate Apache SSL
- name: Generate Apache SSL
  block:
    - name: Generate the SSL certificates and the necessary configurations
      command: docker run --name apache-nifi-ssl apache/nifi-toolkit tls-toolkit standalone -n localhost -C 'CN=admin,OU=NiFi' --subjectAlternativeNames 'localhost,{{ domain }},0.0.0.0,nifiserver' -o /opt/nifi-toolkit/output
      args:
        creates: "{{ project_path }}/localhost/keystore.jks"

    - name: Copy Generated SSL certificates to Local
      command: docker cp apache-nifi-ssl:/opt/nifi-toolkit/output {{ project_path }}
      args:
        creates: "{{ project_path }}/localhost/keystore.jks"

    - name: Change files permission
      command: chmod -R 777 {{ project_path }}/output
      args:
        removes: "{{ project_path }}/output"

    - name: Remove Docker nifi-toolkit temp container
      command: docker container rm apache-nifi-ssl
      args:
        creates: "{{ project_path }}/localhost/keystore.jks"

    - name: Copy output folder
      shell: "mv {{ project_path }}/output/* {{ project_path }}"
      ignore_errors: true
      args:
        removes: "{{ project_path }}/output"

    - name: Remove output folder
      command: "rm -rf {{ project_path }}/output"
      ignore_errors: true
      args:
        removes: "{{ project_path }}/output"

- name: Slurp the content of nifi.properties file
  ansible.builtin.slurp:
    src: "{{ project_path }}/localhost/nifi.properties"
  register: slurped_file

- name: Decode the file content
  set_fact:
    file_content: "{{ slurped_file['content'] | b64decode }}"

- name: Extract keystore password
  set_fact:
    keystore_passwd: "{{ file_content | regex_search('nifi.security.keystorePasswd=(.*)', '\\1') | first }}"

- name: Extract truststore password
  set_fact:
    truststore_passwd: "{{ file_content | regex_search('nifi.security.truststorePasswd=(.*)', '\\1') | first }}"

- name: Print the extracted passwords
  debug:
    msg:
      - "Keystore Password: {{ keystore_passwd }}"
      - "Truststore Password: {{ truststore_passwd }}"

- name: Copy Dkr compose template
  template:
    src: "docker-compose.yaml.j2"
    dest: "{{ project_path }}/docker-compose.yaml"
    force: yes

- name: "Copy .env template"
  template:
    src: "{{ item }}.j2"
    dest: "{{ project_path }}/{{ item }}"
    force: yes
  loop:
    - .env
    - .env.auth

- name: Install Authentik using Dkr Compose
  command: "docker compose up -d --force-recreate"
  args:
    chdir: "{{ project_path }}"

- name: Sleep for 10 seconds and continue with play
  ansible.builtin.wait_for:
    timeout: 15

# Copy config files
- name: Copy config files from containers
  become: false
  shell: "docker compose cp nifi:/opt/nifi/nifi-current/conf {{ project_path }}/conf"
  ignore_errors: true
  args:
    chdir: "{{ project_path }}"
    creates: "{{ project_path }}/conf"
  register: copy_conf_cmd

- block:
    - name: Set directory permissions for ./conf to 777
      ansible.builtin.file:
        path: "{{ project_path }}/conf"
        mode: "0777"
        recurse: yes

    - name: Copy Again  Dkr compose template
      template:
        src: "docker-compose.yaml.j2"
        dest: "{{ project_path }}/docker-compose.yaml"
        force: yes
      vars:
        conf_mapping: true

    # Restart services by enable conf mapping
    - name: Restart services by enable conf mapping
      command: "docker compose up -d --force-recreate"
      args:
        chdir: "{{ project_path }}"

  when: copy_conf_cmd is defined and copy_conf_cmd.rc == 0

- name: Pause play until a URL is reachable from this host
  ignore_errors: true
  ansible.builtin.uri:
    url: "https://{{ vm_ip }}:8443"
    follow_redirects: none
    validate_certs: no
    method: GET
  register: _result
  until: _result.status >= 200
  retries: 30
  delay: 10
